// =====================================
// üß≠ MONGODB COMPASS CONNECTION CHECKER
// =====================================
// MongoDB Compass ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá connection issues diagnose ‡¶è‡¶¨‡¶Ç solve ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

const { MongoClient } = require('mongodb');
const dotenv = require('dotenv');
const path = require('path');

// Load environment variables
dotenv.config({ path: path.join(__dirname, '.env') });

async function checkCompassConnection() {
    console.log('üß≠ MongoDB Compass Connection Diagnostics ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n'.cyan.bold);
    
    const uri = process.env.MONGODB_URI;
    
    if (!uri) {
        console.log('‚ùå MONGODB_URI environment variable ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!'.red.bold);
        return;
    }
    
    console.log('üìã Connection URI Analysis:'.yellow.bold);
    console.log('URI:', uri.replace(/\/\/([^:]+):([^@]+)@/, '//[USERNAME]:[PASSWORD]@'));
    
    // Parse URI components
    try {
        const url = new URL(uri);
        console.log('‚úÖ URI Format: Valid'.green);
        console.log('üè† Host:', url.hostname);
        console.log('üîê Username:', url.username);
        console.log('üóÑÔ∏è Database:', url.pathname.replace('/', '') || 'Default');
        console.log('‚öôÔ∏è Options:', url.search);
    } catch (error) {
        console.log('‚ùå URI Format: Invalid'.red.bold);
        console.log('Error:', error.message);
        return;
    }
    
    console.log('\nüîç Connection Test ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
    
    const client = new MongoClient(uri);
    
    try {
        // Connect to MongoDB
        console.log('üì° Connecting...');
        await client.connect();
        console.log('‚úÖ Connection: Successful!'.green.bold);
        
        // Test database operations
        const db = client.db();
        console.log('üóÑÔ∏è Database Name:', db.databaseName);
        
        // List collections
        const collections = await db.listCollections().toArray();
        console.log('üìÅ Collections Count:', collections.length);
        
        // Test ping
        const adminDb = client.db('admin');
        const pingResult = await adminDb.command({ ping: 1 });
        console.log('üèì Ping Test:', pingResult.ok ? 'Success' : 'Failed');
        
        // Get server info
        const serverStatus = await adminDb.command({ serverStatus: 1 });
        console.log('üñ•Ô∏è Server Version:', serverStatus.version);
        console.log('üèóÔ∏è Server Host:', serverStatus.host);
        
        console.log('\n‚úÖ ‡¶∏‡¶¨ test successful! MongoDB Compass ‡¶è‡¶ì connect ‡¶π‡¶¨‡ßá‡•§'.green.bold);
        
    } catch (error) {
        console.log('\n‚ùå Connection Failed!'.red.bold);
        console.log('Error Type:', error.name);
        console.log('Error Message:', error.message);
        
        // Provide specific solutions
        console.log('\nüí° ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º:'.yellow.bold);
        
        if (error.message.includes('authentication failed')) {
            console.log('üîê Authentication Error:');
            console.log('  - MongoDB Atlas ‡¶è username/password check ‡¶ï‡¶∞‡ßÅ‡¶®');
            console.log('  - Password ‡¶è special characters ‡¶•‡¶æ‡¶ï‡¶≤‡ßá URL encode ‡¶ï‡¶∞‡ßÅ‡¶®');
            console.log('  - @ = %40, # = %23, $ = %24');
        }
        
        if (error.message.includes('network') || error.message.includes('timeout')) {
            console.log('üåê Network Error:');
            console.log('  - Internet connection check ‡¶ï‡¶∞‡ßÅ‡¶®');
            console.log('  - MongoDB Atlas Network Access ‡¶è IP address add ‡¶ï‡¶∞‡ßÅ‡¶®');
            console.log('  - Firewall settings check ‡¶ï‡¶∞‡ßÅ‡¶®');
        }
        
        if (error.message.includes('hostname') || error.message.includes('ENOTFOUND')) {
            console.log('üè† Hostname Error:');
            console.log('  - Cluster URL ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶ø‡¶®‡¶æ check ‡¶ï‡¶∞‡ßÅ‡¶®');
            console.log('  - DNS resolution check ‡¶ï‡¶∞‡ßÅ‡¶®');
        }
        
    } finally {
        await client.close();
        console.log('\nüîí Connection closed.');
    }
}

// Generate Compass Connection String
function generateCompassConnectionString() {
    const uri = process.env.MONGODB_URI;
    
    console.log('\nüß≠ MongoDB Compass Connection Guide:'.cyan.bold);
    console.log('=' * 50);
    
    if (!uri) {
        console.log('‚ùå MONGODB_URI not found!');
        return;
    }
    
    // Clean URI for Compass
    const compassUri = uri.replace(/\?.*$/, ''); // Remove query parameters for basic connection
    const fullUri = uri; // Keep full URI with parameters
    
    console.log('\nüìã Connection Options:'.yellow.bold);
    console.log('\n1Ô∏è‚É£ Basic Connection (Recommended):');
    console.log(compassUri);
    
    console.log('\n2Ô∏è‚É£ Full Connection with Parameters:');
    console.log(fullUri);
    
    console.log('\nüìñ Compass ‡¶è ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá connect ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:'.green.bold);
    console.log('Step 1: MongoDB Compass open ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('Step 2: "New Connection" ‡¶è click ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('Step 3: ‡¶â‡¶™‡¶∞‡ßá‡¶∞ URI copy ‡¶ï‡¶∞‡ßá paste ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('Step 4: "Connect" button ‡¶è click ‡¶ï‡¶∞‡ßÅ‡¶®');
    
    console.log('\n‚ö†Ô∏è Common Issues ‡¶è‡¶¨‡¶Ç Solutions:'.red.bold);
    console.log('‚ùå IP Whitelist: MongoDB Atlas ‡¶è 0.0.0.0/0 add ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('‚ùå Password: Special characters URL encode ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('‚ùå Network: VPN/Proxy disable ‡¶ï‡¶∞‡ßá try ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('‚ùå Firewall: Port 27017 open ‡¶ï‡¶∞‡ßÅ‡¶®');
}

// Network diagnostics
async function networkDiagnostics() {
    console.log('\nüåê Network Diagnostics:'.cyan.bold);
    
    const dns = require('dns').promises;
    const net = require('net');
    
    try {
        // Extract hostname from URI
        const uri = process.env.MONGODB_URI;
        const url = new URL(uri);
        const hostname = url.hostname;
        
        console.log('üîç DNS Resolution Test...');
        const addresses = await dns.lookup(hostname);
        console.log('‚úÖ DNS Resolution: Success');
        console.log('üè† Resolved IP:', addresses.address);
        
        console.log('\nüîå Port Connectivity Test...');
        const port = 27017;
        
        const socket = new net.Socket();
        const timeout = 5000;
        
        const portTest = new Promise((resolve, reject) => {
            socket.setTimeout(timeout);
            socket.connect(port, hostname, () => {
                socket.destroy();
                resolve(true);
            });
            socket.on('error', reject);
            socket.on('timeout', () => reject(new Error('Connection timeout')));
        });
        
        await portTest;
        console.log('‚úÖ Port 27017: Accessible');
        
    } catch (error) {
        console.log('‚ùå Network Issue:', error.message);
        console.log('\nüí° Solutions:');
        console.log('  - Check internet connection');
        console.log('  - Disable VPN/Proxy temporarily');
        console.log('  - Check firewall settings');
        console.log('  - Try from different network');
    }
}

// Main function
async function main() {
    try {
        await checkCompassConnection();
        generateCompassConnectionString();
        await networkDiagnostics();
        
        console.log('\nüéØ Quick Fix Commands:'.magenta.bold);
        console.log('1. MongoDB restart: net stop MongoDB && net start MongoDB');
        console.log('2. DNS flush: ipconfig /flushdns');
        console.log('3. Compass reset: Delete %APPDATA%\\MongoDB Compass\\');
        
    } catch (error) {
        console.log('‚ùå Diagnostic failed:', error.message);
    }
}

// Add colors support
const colors = require('colors');

// Run diagnostics
main();
