// =====================================
// üåê IP ADDRESS CHECKER FOR MONGODB ATLAS
// =====================================

const https = require('https');

async function getCurrentIP() {
    console.log('üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Current IP Address ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n'.cyan.bold);
    
    try {
        // Method 1: Using ipify service
        const ipifyPromise = new Promise((resolve, reject) => {
            https.get('https://api.ipify.org?format=json', (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                    try {
                        const result = JSON.parse(data);
                        resolve(result.ip);
                    } catch (e) {
                        reject(e);
                    }
                });
            }).on('error', reject);
        });
        
        const ip = await ipifyPromise;
        console.log('üåê ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Public IP Address:', ip.green.bold);
        
        console.log('\nüìã MongoDB Atlas IP Whitelist ‡¶è ‡¶è‡¶á steps follow ‡¶ï‡¶∞‡ßÅ‡¶®:'.yellow.bold);
        console.log('1. MongoDB Atlas Dashboard ‡¶è login ‡¶ï‡¶∞‡ßÅ‡¶®');
        console.log('2. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Cluster select ‡¶ï‡¶∞‡ßÅ‡¶®');
        console.log('3. "Network Access" tab ‡¶è ‡¶Ø‡¶æ‡¶®');
        console.log('4. "Add IP Address" button ‡¶è click ‡¶ï‡¶∞‡ßÅ‡¶®');
        console.log('5. "Add Current IP Address" select ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ');
        console.log(`6. Manually ‡¶è‡¶á IP add ‡¶ï‡¶∞‡ßÅ‡¶®: ${ip}`);
        console.log('7. ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶∏‡¶¨ IP allow ‡¶ï‡¶∞‡¶§‡ßá: 0.0.0.0/0 add ‡¶ï‡¶∞‡ßÅ‡¶®');
        
        console.log('\n‚ö†Ô∏è Security Note:'.red.bold);
        console.log('Production ‡¶è 0.0.0.0/0 use ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§ ‡¶∂‡ßÅ‡¶ß‡ßÅ development ‡¶è‡•§');
        
        console.log('\nüîÑ Alternative IPs to try:'.magenta.bold);
        console.log('- Current IP:', ip);
        console.log('- Allow All: 0.0.0.0/0');
        console.log('- Local Range: 192.168.0.0/16');
        console.log('- Private Range: 10.0.0.0/8');
        
        return ip;
        
    } catch (error) {
        console.log('‚ùå IP Address ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', error.message.red);
        console.log('\nüí° Manual IP check ‡¶ï‡¶∞‡ßÅ‡¶®:');
        console.log('- Google ‡¶è search ‡¶ï‡¶∞‡ßÅ‡¶®: "what is my ip"');
        console.log('- ‡¶Ö‡¶•‡¶¨‡¶æ visit ‡¶ï‡¶∞‡ßÅ‡¶®: https://whatismyipaddress.com/');
    }
}

async function testMongoDBAtlasAccess() {
    console.log('\nüß™ MongoDB Atlas Access Test ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n'.cyan.bold);
    
    const testHosts = [
        'gayanguru.qru9o30.mongodb.net',
        'cluster0.mongodb.net',
        'atlas.mongodb.com'
    ];
    
    for (const host of testHosts) {
        try {
            console.log(`üîç Testing ${host}...`);
            
            const testPromise = new Promise((resolve, reject) => {
                const req = https.request({
                    hostname: host,
                    port: 443,
                    path: '/',
                    method: 'HEAD',
                    timeout: 5000
                }, (res) => {
                    resolve(res.statusCode);
                });
                
                req.on('error', reject);
                req.on('timeout', () => reject(new Error('Timeout')));
                req.end();
            });
            
            await testPromise;
            console.log(`‚úÖ ${host}: Accessible`.green);
            
        } catch (error) {
            console.log(`‚ùå ${host}: ${error.message}`.red);
        }
    }
}

function generateCompassInstructions() {
    console.log('\nüß≠ MongoDB Compass ‡¶è Connect ‡¶ï‡¶∞‡¶æ‡¶∞ Instructions:'.yellow.bold);
    console.log('=' * 60);
    
    console.log('\nüìù Step-by-Step Guide:');
    console.log('1. MongoDB Compass application open ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('2. Welcome screen ‡¶è "New Connection" click ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('3. Connection String field ‡¶è paste ‡¶ï‡¶∞‡ßÅ‡¶®:');
    console.log('   mongodb+srv://dhiman:dhiman%402003@gayanguru.qru9o30.mongodb.net/gyanguru'.green);
    console.log('4. "Connect" button ‡¶è click ‡¶ï‡¶∞‡ßÅ‡¶®');
    
    console.log('\nüîß ‡¶Ø‡¶¶‡¶ø ‡¶â‡¶™‡¶∞‡ßá‡¶∞ method ‡¶ï‡¶æ‡¶ú ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá:');
    console.log('1. "Fill in connection fields individually" select ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('2. ‡¶è‡¶á values ‡¶¶‡¶ø‡¶®:');
    console.log('   - Hostname: gayanguru.qru9o30.mongodb.net');
    console.log('   - Port: 27017');
    console.log('   - Authentication: Username/Password');
    console.log('   - Username: dhiman');
    console.log('   - Password: dhiman@2003');
    console.log('   - Authentication Database: admin');
    console.log('   - SSL: Yes');
    
    console.log('\n‚ö° Quick Fixes:');
    console.log('- Compass restart ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('- Windows restart ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('- Different WiFi/Mobile data try ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('- VPN disable ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('- Antivirus temporarily disable ‡¶ï‡¶∞‡ßÅ‡¶®');
}

async function main() {
    const colors = require('colors');
    
    console.log('üß≠ MongoDB Compass Connection Helper'.rainbow.bold);
    console.log('=====================================\n');
    
    await getCurrentIP();
    await testMongoDBAtlasAccess();
    generateCompassInstructions();
    
    console.log('\nüéØ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂:'.magenta.bold);
    console.log('‚úÖ Application connection ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡ßá');
    console.log('‚ùì Compass connection ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶∞‡ßá‡¶∞ steps follow ‡¶ï‡¶∞‡ßÅ‡¶®');
    console.log('üìû ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, IP whitelist check ‡¶ï‡¶∞‡ßÅ‡¶®');
}

main().catch(console.error);
